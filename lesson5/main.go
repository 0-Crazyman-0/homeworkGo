package main

import "fmt"

type Number int
type Agee int
type Score int

func main() {
	//     person := struct {
	//         Name string
	//         Age  int
	//     }{
	//         Name: "Alice",
	//         Age:  30,
	//     }
	//     fmt.Println(person)
	// println(Nnn(1))
	// println(Namber(1))
	// println(gpa(1))
	// obratno(100)
	// println(Temp(5))
	// fmt.Printf("%.2f", Pri(100))

	// var a User = User{"Neka", 19}
	// println(a.name)
	// println(a.age)
	var b Product = Product{"картошка", 20}
	fmt.Printf("%.2f", b.Price)
}

// Определение возраста совершеннолетия
// Определите тип Age на основе int. Напишите функцию, которая принимает возраст и возвращает сообщение о том,
// является ли человек совершеннолетним (возраст 18 лет и старше) или нет.

func Nnn(n Agee) string {
	fmt.Scan(&n)
	if n >= 18 {
		return "является совершеннолетний "
	} else {
		return " не является совершеннолетний"
	}
}

// Проверка на четность
// Определите тип Number на основе int. Напишите функцию, которая принимает число и возвращает сообщение о том,
// является ли оно четным или нечетным.

func Namber(a Number) string {
	fmt.Scan(&a)
	if a%2 == 0 {
		return "является четным "
	} else {
		return "не является четным"
	}
}

// Проверка допустимого диапазона
// Определите тип Score на основе int. Напишите функцию, которая принимает оценку и возвращает сообщение,
// находится ли она в допустимом диапазоне от 0 до 100

func gpa(a Score) string {
	fmt.Scan(&a)
	if a >= 0 && a <= 100 {
		return "оценка находиться в допустимом диапазоне"
	} else {
		return "оценка не  находиться в допустимом диапазоне"
	}
}

// Арифметические операции
// Определите тип функции Operation, которая принимает два int и возвращает int. Напишите функции для сложения,
// вычитания и умножения. Используйте тип Operation для вызова этих функций

type Operation func(int, int) int

// Сравнение чисел
// Определите тип функции Comparator, которая принимает два int и возвращает bool. Напишите функции для проверки
// равенства и сравнения больше/меньше. Используйте тип Comparator для вызова этих функций.

// Применение функции к числу
// Определите тип функции UnaryOperation, которая принимает int и возвращает int. Напишите функции для удвоения
// и утроения числа. Используйте тип UnaryOperation для вызова этих функций.

// Обратный отсчет
// Создайте псевдоним для типа int под названием Count. Напишите функцию, которая принимает Count и выводит
// обратный отсчет до нуля.

type Count = int

func obratno(a Count) {
	for i := a; i >= 0; i-- {
		println(i)
	}
}

// Проверка температуры
// Создайте псевдоним для типа float64 под названием Temperature. Напишите функцию, которая принимает
// Temperature и выводит сообщение о состоянии (ниже нуля, выше нуля или ноль).

// type Temperature = float64

// func Temp(a Temperature) string {
// 	if a < 0 {
// 		return "ниже нуля"
// 	} else {
// 		return "выше нуля или ноль"
// 	}
// }

// Применение скидки
// Создайте псевдоним для типа float64 под названием Price. Напишите функцию, которая принимает Price
// и возвращает новую цену с 10% скидкой.

type Price = float64

func Pri(a Price) Price {
	return a - (a * 10 / 100)
}

// Информация о пользователе
// Создайте структуру User с полями Name (строка) и Age (целое число). Напишите функцию, которая
// принимает User и выводит информацию о нем.

type User struct {
	name string
	age  int
}

// Продукт и его стоимость
// Создайте структуру Product с полями Name (строка) и Price (тип Price). Напишите функцию, которая
// принимает Product и возвращает сообщение о его стоимости.

type Product struct {
	Name  string
	Price Price
}

func change(Product) string {
	var a Product = Product{"картошка", 20}
	println(a)
	return "цена картошки "
}

// Информация о книге
// Создайте структуру Book с полями Title (строка), Author (строка) и Pages (целое число). Напишите функцию,
// которая принимает Book и выводит информацию о книге.

// Изменение данных через указатель
// Создайте структуру Person с полями Name и Age. Напишите функцию, которая принимает указатель на Person
// и обновляет его возраст. Выведите информацию до и после обновления.

// Создание и изменение структуры через указатель
// Создайте структуру Rectangle с полями Width и Height. Напишите функцию, которая принимает указатель
// на Rectangle, вычисляет и обновляет его площадь, а затем выводит обновленную площадь.

// Сравнение двух структур через указатели
// Создайте структуру Coordinate с полями X и Y. Напишите функцию, которая принимает указатели на две
// Coordinate и возвращает сообщение о том, равны ли они или нет.
